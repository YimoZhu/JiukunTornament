# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import broker_pb2 as broker__pb2
import common_pb2 as common__pb2


class BrokerStub(object):
  """////////////////////////////////////////////////////////////////////////////
  Services
  ////////////////////////////////////////////////////////////////////////////

  Public API for traders
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.info = channel.unary_unary(
        '/Broker/info',
        request_serializer=common__pb2.Empty.SerializeToString,
        response_deserializer=broker__pb2.BrokerInfo.FromString,
        )
    self.register = channel.unary_unary(
        '/Broker/register',
        request_serializer=broker__pb2.RegisterRequest.SerializeToString,
        response_deserializer=broker__pb2.TraderResponse.FromString,
        )
    self.new_order = channel.unary_unary(
        '/Broker/new_order',
        request_serializer=broker__pb2.TraderRequest.SerializeToString,
        response_deserializer=broker__pb2.TraderResponse.FromString,
        )
    self.cancel_order = channel.unary_unary(
        '/Broker/cancel_order',
        request_serializer=broker__pb2.TraderRequest.SerializeToString,
        response_deserializer=broker__pb2.TraderResponse.FromString,
        )
    self.get_trader = channel.unary_unary(
        '/Broker/get_trader',
        request_serializer=broker__pb2.TraderRequest.SerializeToString,
        response_deserializer=broker__pb2.TraderResponse.FromString,
        )


class BrokerServicer(object):
  """////////////////////////////////////////////////////////////////////////////
  Services
  ////////////////////////////////////////////////////////////////////////////

  Public API for traders
  """

  def info(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def register(self, request, context):
    """A trader must first register at the Broker and acquire a valid trader
    ID and PIN.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def new_order(self, request, context):
    """Submits a new order.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def cancel_order(self, request, context):
    """Cancels a previously submitted order.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_trader(self, request, context):
    """Requests a full update of the trader data.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_BrokerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'info': grpc.unary_unary_rpc_method_handler(
          servicer.info,
          request_deserializer=common__pb2.Empty.FromString,
          response_serializer=broker__pb2.BrokerInfo.SerializeToString,
      ),
      'register': grpc.unary_unary_rpc_method_handler(
          servicer.register,
          request_deserializer=broker__pb2.RegisterRequest.FromString,
          response_serializer=broker__pb2.TraderResponse.SerializeToString,
      ),
      'new_order': grpc.unary_unary_rpc_method_handler(
          servicer.new_order,
          request_deserializer=broker__pb2.TraderRequest.FromString,
          response_serializer=broker__pb2.TraderResponse.SerializeToString,
      ),
      'cancel_order': grpc.unary_unary_rpc_method_handler(
          servicer.cancel_order,
          request_deserializer=broker__pb2.TraderRequest.FromString,
          response_serializer=broker__pb2.TraderResponse.SerializeToString,
      ),
      'get_trader': grpc.unary_unary_rpc_method_handler(
          servicer.get_trader,
          request_deserializer=broker__pb2.TraderRequest.FromString,
          response_serializer=broker__pb2.TraderResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Broker', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class MarketDataStub(object):
  """Provides access to real-time market data
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.list_instruments = channel.unary_unary(
        '/MarketData/list_instruments',
        request_serializer=common__pb2.Empty.SerializeToString,
        response_deserializer=common__pb2.InstrumentInfoList.FromString,
        )
    self.subscribe = channel.unary_stream(
        '/MarketData/subscribe',
        request_serializer=common__pb2.Empty.SerializeToString,
        response_deserializer=broker__pb2.MarketSnapshot.FromString,
        )


class MarketDataServicer(object):
  """Provides access to real-time market data
  """

  def list_instruments(self, request, context):
    """Returns static properties of the instruments in the Exchange.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def subscribe(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MarketDataServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'list_instruments': grpc.unary_unary_rpc_method_handler(
          servicer.list_instruments,
          request_deserializer=common__pb2.Empty.FromString,
          response_serializer=common__pb2.InstrumentInfoList.SerializeToString,
      ),
      'subscribe': grpc.unary_stream_rpc_method_handler(
          servicer.subscribe,
          request_deserializer=common__pb2.Empty.FromString,
          response_serializer=broker__pb2.MarketSnapshot.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'MarketData', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
